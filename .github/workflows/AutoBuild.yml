#=======================================================
# Description: Build OpenWrt using GitHub Actions
# https://github.com/Hyy2001X/AutoBuild-Actions
# Lisence: MIT
# Author: P3TERX
# Modify: Hyy2001X
#=======================================================

name: AutoBuild

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: true
        default: 'false'

  schedule:
    - cron: 0 11 * * *

  watch:
    types: [started]

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  CONFIG_FILE: NEWIFI_D2-NIGHTLY.config
  DIY_SCRIPT: Scripts/AutoBuild_DiyScript.sh
  FUNCTION_SCRIPT: Scripts/AutoBuild_Function.sh
  UPLOAD_RELEASE: false
  UPLOAD_FIRMWARE: true
  UPLOAD_BIN_DIR: true
  REMOVE_OLD_RELEASE: false
  REMOVE_WORKFLOW_RUNS: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@main
      
    - name: 检测脚本设置
      run: |
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
        echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV
        echo "WXFB_MESSAGE=${WXFB_MESSAGE}" >> $GITHUB_ENV
        echo "DIY_P1_SH=${DIY_P1_SH}" >> $GITHUB_ENV
        echo "DIY_P2_SH=${DIY_P2_SH}" >> $GITHUB_ENV
        echo "SSH_ACTIONS=${SSH_ACTIONS}" >> $GITHUB_ENV
        echo "UPLOAD_BIN_DIR=${UPLOAD_BIN_DIR}" >> $GITHUB_ENV
        echo "UPLOAD_CONFIG=${UPLOAD_CONFIG}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE=${UPLOAD_FIRMWARE}" >> $GITHUB_ENV
        echo "UPLOAD_COWTRANSFER=${UPLOAD_COWTRANSFER}" >> $GITHUB_ENV
        echo "UPLOAD_RELEASE=${UPLOAD_RELEASE}" >> $GITHUB_ENV
        echo "SERVERCHAN_SCKEY=${SERVERCHAN_SCKEY}" >> $GITHUB_ENV

    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804)
        sudo timedatectl set-timezone "Asia/Shanghai"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone Openwrt source code
      run: |
        git clone -b master $REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Run Diy-Part1 Scripts
      run: |
        chmod +x $DIY_SCRIPT
        cd openwrt
        source $GITHUB_WORKSPACE/$DIY_SCRIPT
        source $GITHUB_WORKSPACE/$FUNCTION_SCRIPT && Diy-Part1
        echo "Compile_Date=$(date +%Y%m%d)" > $GITHUB_WORKSPACE/Openwrt.info
        echo "Display_Date=$(date +'%Y/%m/%d')" >> $GITHUB_WORKSPACE/Openwrt.info

    - name: Update & Install Feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Run Diy-Part2 Scripts
      run: |
        cp -Rf $GITHUB_WORKSPACE/build/diy/* $GITHUB_WORKSPACE/openwrt/
        [ -f $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        cd openwrt
        source $GITHUB_WORKSPACE/$DIY_SCRIPT
        source $GITHUB_WORKSPACE/$FUNCTION_SCRIPT && Diy-Part2

    - name: SSH远程连接
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: 下载软件包
      run: |
        cd openwrt
        make defconfig
        make download -j$(nproc) V=s
        find dl -size -1024c -exec rm -f {} \;

    - name: 开始编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(($(nproc)+1)) thread compile"
        make -j$(($(nproc)+1)) || make -j1 V=s
        echo "::set-output name=status::success"
        echo "date=$(date "+%y.%m.%d-%H%M")" >> $GITHUB_ENV
        echo "date1=$(date "+%Y年%m月%d号-%H点%M分")" >> $GITHUB_ENV
        echo "date2=$(date "+%Y%m%d%H%M%S")" >> $GITHUB_ENV
        DEVICE=$(awk -F '[="]+' '/TARGET_BOARD/{print $2}' .config)
        SUBTARGET="$(awk -F '[="]+' '/TARGET_SUBTARGET/{print $2}' .config)"
        if [ $DEVICE == "x86" ]; then
         echo "NAME1=x86-${SUBTARGET}" >> $GITHUB_ENV
        elif [ ${{matrix.target}} == "Lede_phicomm_n1" -o ${{matrix.target}} == "Project_phicomm_n1" ];then
         echo "NAME1=n1,Vplus,Beikeyun,L1Pro,S9xxx" >> $GITHUB_ENV
        elif [ $DEVICE != "x86" ]; then
         grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > NAME1
         [ -s NAME1 ] && echo "NAME1=$(cat NAME1)" >> $GITHUB_ENV
        fi
    - name: 上传bin文件夹(固件+ipk)在github空间
      uses: actions/upload-artifact@v2
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt-bin-${{ env.NAME2 }}${{ env.NAME1 }}_${{ env.date }}
        path: openwrt/bin

    - name: 编译N1机型时,打包（N1、微加云、贝壳云、我家云、S9xxx）固件
      run: |
        if [ ${{matrix.target}} == "Lede_phicomm_n1" -o ${{matrix.target}} == "Project_phicomm_n1" ];then
         cp openwrt/bin/targets/armvirt/*/*.tar.gz reform/openwrt
         cd reform
         sudo ./gen_openwrt -d -k latest
         
         devices=("phicomm-n1" "rk3328" "s9xxx" "vplus")
         cd out
         for x in ${devices[*]}; do
           cd $x
           filename=$(ls | awk -F '.img' '{print $1}')
           gzip *.img
           cd ../
           echo "firmware_$x=$filename" >> $GITHUB_ENV
         done
           cd ../../
           mv -f reform/out/*/*.img.gz openwrt/bin/targets/armvirt/*
        fi
    
    - name: 整理固件文件夹
      id: organizer
      run: |
        mkdir config
        find openwrt/bin/targets/ -name "*config.buildinfo*" | xargs -i mv -f {} config
        if [ -n "$(ls -A "openwrt/bin/targets/x86" 2>/dev/null)" ]; then
         find openwrt/bin/targets/x86/* -name "*kernel*" | xargs -i mv -f {} openwrt/bin/targets
        fi
        cd openwrt/bin/targets/*/*
        rm -rf packages && mkdir packages
        find -name "*buildinfo*" | xargs -i mv -f {} packages
        find -name "*sha256sums*" | xargs -i mv -f {} packages
        find -name "*manifest*" | xargs -i mv -f {} packages
        find -name "*vmlinuz*" | xargs -i mv -f {} packages
        find -name "*Image*" | xargs -i mv -f {} packages
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"
    
    - name: 上传.config配置文件在github空间
      uses: actions/upload-artifact@v2
      if: steps.organizer.outputs.status == 'success' && env.UPLOAD_CONFIG == 'true'
      with:
        name: .config-${{ env.NAME2 }}${{ env.NAME1 }}_${{ env.date }}
        path: ./config

    - name: 上传固件在github空间
      uses: actions/upload-artifact@v2
      if: steps.organizer.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true'
      with:
        name: OpenWrt-${{ env.NAME2 }}${{ env.NAME1 }}-firmware-${{ env.date }}
        path: ${{ env.FIRMWARE }}

    - name: 上传固件到「奶牛快传」和「WeTransfer」
      if: steps.organizer.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=奶牛快传（${{matrix.target}}）::$(cat cowtransfer.log | grep https)"
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=WeTransfer（${{matrix.target}}）::$(cat wetransfer.log | grep https)"
    
    - name: 提取发布用的「奶牛快传」跟「WeTransfer」的链接
      if: steps.organizer.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' || (github.event.inputs.release == 'release' && github.event.inputs.release  != 'false')
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "COWTRANSFER_URL=$(cat cowtransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_ENV
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "WETRANSFER_URL=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_ENV
    
    - name: 自动发布固件
      uses: softprops/action-gh-release@v1
      if: steps.organizer.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' || (github.event.inputs.release == 'release' && github.event.inputs.release  != 'false')
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      with:
        name: ${{ env.date1 }} 「 ${{ env.WXFB_MESSAGE }} 」固件
        tag_name: ${{ env.date2 }}
        body: |            
            ☆  源码 : ${{ env.REPO_URL }}
            ☆  分支 : ${{ env.REPO_BRANCH }}
            ☆  感谢源码作者[ ${{ env.ZUOZHE }}大神 ]无私分享！
            
            🎉 [ ${{ env.NAME2 }}${{ env.NAME1 }} ]固件下载 ✨
            -
            💐 奶牛快传(国内高速🚀下载)： ${{ env.COWTRANSFER_URL }}
            
            ⛄ WeTransfer(国外高速🚀下载)： ${{ env.WETRANSFER_URL }}
            
            🌴 链接有效期为7天，无需注册直接下载 🐤
        files: ${{ env.FIRMWARE }}/*
    
    - name: 微信通知
      uses: emon100/Action-Serverchan@v2
      if: steps.organizer.outputs.status == 'success' && env.SERVERCHAN_SCKEY == 'true' || (github.event.inputs.wxtz == 'wxtz' && github.event.inputs.wxtz  != 'false')
      with:
        SCKEY: ${{ secrets.SCKEY }}
        text: 恭喜主人${{ env.WXFB_MESSAGE }}固件编译成功！
        desp: 我亲爱的主人您要编译的[ ${{ env.NAME2 }}${{ env.NAME1 }} ]固件顺利编译完成了！
              
              
              完成时间：${{ env.date1 }}
              
              
              发布地址：${{ env.GITHUB_RELEASE }}
              
              
              奶牛快传：${{ env.COWTRANSFER_URL }}
              
              
              WeTransfer：${{ env.WETRANSFER_URL }}
              
              
              祝小主人见人爱，花见花开，车见车载，天天好心情🎈！！！
